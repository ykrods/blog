.. post:: 2019-11-18
  :tags: 随筆, poem
  :category: 随筆


======================================================================
[随筆] クソコードが蔓延しているのは CTO がいないから
======================================================================

前書き
=======

この文章は現場の空気感を反映しているとは思いますが、特に裏付けのない思いつきです。

背景
=======

受託経験を積む中で数多くのクソコードを見てきました。あまりにも多いので、私はこれはシステム開発における普遍的な問題と言えるのではないかと思いました。そして、何故クソコードが生まれるのかを考えた末一つの考えに至りました。

「CTO がいないからや！」

と。

クソコードの定義
=======================================

クソコードの要件は具体的には「１関数・１クラスのコードが長すぎる」「コメントがない」「コードの流れがわからない（スパゲッティーコード）」などいくつかありますが、突き詰めると「人が読めない」コードと言い表せると思います。

コードというのは基本的に「人に読まれる」ことを前提とするべきです。機能を拡張する場合やバグを修正する場合、コードを読んで何がどこに影響しているかを正しく把握する必要があります。良いコードはこのコードとその影響範囲の因果関係が把握しやすい（つまり読みやすい）ものであり、クソコードはわかりにくいという枠を超えて、何時間読み込もうが意味がわからないコードと言えます。

システムの担当者が変わる、あるいは保守を開発とは別の会社に依頼するということは通常に起こり得ることであり、何より書いた人間自身でも自分のコードを忘れるものなので、コードはエンジニアが一般的な知識範囲で理解できる方が仕事がしやすく、実装者は（何があっても死なずにシステムを守り続ける人外の存在でもなければ）他人（あるいは将来の自分）が読みやすいコードを書くべきだと思います。


CTO の不在
==============================

何故CTOの不在がクソコードを生み出すのかというと、クソコードが生まれる要因を考えた時にその責任が全て CTO にあると考えられるからです。果たすべき責任を果たせていないので「いない」ということですね。

まずクソコードが生まれる要因を列挙し、それぞれ考察したいと思います。

1. 単純にスキルが足りていない
2. 将来の保守性など考えている余裕がない
3. 新しい技術やフレームワークに対する知識不足
4. クソコードを書いても評価に影響しない
5. 採用をミスっている

1. 単純にスキルが足りていない
-------------------------------

前述した実装者に「コードが人に読まれる」という発想自体がない、あるいはあってもどう書けば他人が理解しやすいかが分かっていない場合です。

他人がわかりやすいかどうかは当然他人から出なければわからないので、この場合、コードレビューが有効になるはずですが、そもそもコードレビューで何をレビューするべきかが浸透しておらず、実質的に開発者による動作テストがコードレビュー（つまり挙動しか見られない）と化しているようなパターンもあります。

Q. あるべき品質を提示し、不足があれば教育を行う役目は誰にあるでしょうか？
A. CTOです

2. 将来の保守性など考えている余裕がない
---------------------------------------------

優れたエンジニアでも人間なので、追い詰められると判断を誤ったり、場当たり的な対応を良しとしてしまいます。そもそも今日を生きることに精一杯の人間は明日のことなど考えられません。つまり何が言いたいかというと、スケジュールが厳しければある程度クソでもしょうがないのです。

しょうがないのですが、これは将来にわたって苦しめられる問題を生む可能性を持っています。何故なら「多少コードに問題があってもそれだけでは書き直す機会が与えられない」からです。コードを変えるということはすなわちその分エンジニアが働くことになり、さらに変更に応じたテスト作業、受け入れ作業が発生します。「コードがクソなので直したいですお金ください」と言われてすんなり払ってくれるクライアントがどれだけいるでしょうか？クライアントとの信頼関係によっては成立する場合もあると思いますが、根本的な問題は（強要でもされていない限り）スケジュールの引き方を間違えた側にあるとしてタダで直せやくらいまで言われかねません。

現実的には追加開発時の費用や保守費用で「ちょっとずつ」直していくか、直すことを諦めて場当たり的な対応を続けることが多いのではないでしょうか？何れにせよ担当するエンジニアには苦行になるでしょう（まぁ、チーム内で改善する意識が共有できていれば楽しいものになったりしますが）

Q. 技術面の考慮をしていない無理なスケジュールに対して待ったを掛け、妥当なスケジュールを提示する役割は、誰にあるでしょうか？
A. CTOです

3. 新しい技術やフレームワークに対する知識不足
------------------------------------------------

優れたエンジニアでも新しい技術やフレームワークに対しては間違った使い方をすることがあります。

人間なので、ミスはするものなのですが、2. で触れたように一度納品したものに手を加えるのが難しいものです。

これに対して取れる対応としては「使ったことがない技術には調査期間を設ける」「試作したものを他人に評価してもらう」などが考えられますが、実際に作ってみないと判断が難しいものでもあり、ある程度発生するものとして受け入れるしかないように思います。

Q. 新しい技術の導入可否において責任を持っているのは誰ですか？
A. 一般的にCTOと言われますが、これは避けようと思って避けられるものではないので、作った後にチーム内の改善意識をどう持っていくかという話になると思います。


4. クソコードを書いても評価に影響しない
------------------------------------------------

私が知っている会社で（そんなにいろんな会社知ってるわけでもないですけど）クソコードを書いたら減俸されるような会社はありません。

逆説的には減俸されないのだからいくらクソコードを書いてもいいことになります。

Q. 社員評価において、技術的な評価を下す役割は誰が持ちますか？
A. CTOです

5. 採用をミスっている
-------------------------

言わずもがなですが、上述したような外的な要因を除けばクソコードはクソコードを書く人間から生まれるので、採用時にそういう人間を取らなければ良いということになります。

Q. 社員採用時ににおいて、技術的な評価を下す役割は誰が持ちますか？
A. CTOです

はい
======

全てがCTOの責任ではありませんでしたが、概ねCTOの責任でした。

何が言いたいのか
------------------

特定のCTOが悪いっていう話をしたいのではなく、クソコードが生まれるということはCTOがやるべきことをやれていない可能性が高いので、見直すべきなのでは？という問題提起に近いです。

そもそも、単純な利益だけを見ていたら開発期間は際限なく短くした方が良いのは当然で、経営判断に別の視点を入れるためにCTOが存在しているはずなのだから、CTOは別のCXOからは損失に見える提案をしていく必要があるし、CXOは利益だけで却下せずにCTOの提案に耳を傾けるべきでは？と思います（いや、現実的にどうかとか、知らないですけど）。


クソコードが何をもたらすのか
=============================

最後にクソコードが具体的にどういう損失を与えるかですが、これは簡単な話で、エンジニアが流出します。

クソコードに向き合うことに楽しさややりがいを感じることもできますが、これは前向きな前進ができているからです。チームメンバーがクソコードを生み出す状態が続いている、つまり１歩進んで２歩下がるような状態でやりがいを見出すことはできないでしょう。

最後の最後
-----------

そもそも要件定義がクソ・設計がクソでコードがクソ化するんやっていう話もあるんですが、際限ないのでこの辺で
