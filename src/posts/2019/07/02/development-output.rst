.. post:: 2019-07-01
  :tags: 要件定義
  :category: 受託開発

==============================
開発の各工程における成果物
==============================

.. contents::
  :local:

このドキュメントの目的
=======================

開発でいつ何がいるんだっけ、というのを整理する。

- 受託のWEBシステム開発を想定しています。
- 要素の洗い出しをする意図でまとめており、プロジェクトによっては不要な成果物もあると思われます。
- それぞれのドキュメントをどう書くかは具体例を別途まとめたいと思います。

成果物の必要性
===============

- いわゆる「顧客が本当に欲しかったもの」を作るためにはプロジェクトメンバー全員の認識共有が重要。全員で毎回ミーティングを行うよりドキュメントにまとめた方が効率が良い
- 見積もりの精度を上げ、認識齟齬を減らすにはなんらかの形でアウトプットするのが良い
- 各工程での進捗の把握と評価に使う

  - 成果物の完成を以ってその工程が完了、とした方が進捗が分かりやすい

工程ごとの成果物
=================

.. list-table::
  :header-rows: 1
  :widths: 30, 30, 40

  - - 工程
    - 説明
    - 成果物とその内容
  - - 要求定義 / ヒアリング
    - 要求をまとめて、システム案と進め方を提案する
    - RFP

      - システム導入の目的
      - 組織体制や業務の説明
      - 現状の課題
      - プロジェクトの体制・役割
      - 委託範囲
      - 予算規模
      - 提案依頼事項

  - - 要件定義
    - システムが持つ機能をFIXし、設計と実装の工数が大きくブレないレベルの情報を揃える
    - * システム概要
      * 機能一覧
      * 非機能要件
      * 納品物
      * 業務フロー図
      * 現状分析

  - - 見積もり
    - 要件に対して計画を立て、スケジュール・金額を提示する
    - * 見積もり
      * スケジュール
      * 前提条件

  - - 外部設計
    - システムの外部から見て、そのシステムがどの様に振る舞うかを説明する
    - 機能仕様書

      * 画面・帳票・バッチ各機能の入出力・処理内容

      ユースケース記述

      画面遷移図

      シークエンス図

      連携システムなどの外部資料

  - - 基本設計
    - システム全体に関わる仕様を決める
    - 基本仕様書

      * インフラ・ミドルウェア・フレームワーク選定
      * db設計（基本部分）
      * 用語集
      * 状態遷移図
      * システム構成図
      * ネットワーク構成図

      アーキテクチャ

  - - 詳細設計
    - 機能ごとの技術仕様をまとめる
    - 技術仕様書

      * 実装方針
      * モジュール・クラス設計
      * アルゴリズム・ライブラリの選定

  - - 実装・システム構築
    -
    - システム
  - - テスト設計
    -
    - テスト設計書
  - - テスト
    -
    - テスト実施書
  - - 検収・納品
    -
    - 各成果物の確認

詳細
=====

要求定義 / ヒアリング
--------------------------

そもそも何を欲しているかを整理する

- 個人的な体験としては、RFPおよび提案書は省略され、システム概要の様なパワーポイントの資料をいただく形が多い
- システム概要的なものが来た場合は、RFPに記載される項目と比較して足りない情報がないかを一度確認した方が良い
- 表に載せたのは業務システム想定だが、BtoCでも項目にターゲットのユーザ層とユーザ価値を加えれば良いと思われる
- いただいた資料をもとにプロジェクトの進め方について提案する

.. tip::

  提案時の役割

  - 要件定義を行う場合、大抵業務担当者にヒアリングする人が必要なのでそれを誰がやるかは明確にする

要件定義
----------

開発対象の機能をFIXさせ、設計と実装の工数が大きくブレないレベルの情報を揃える

- 機能一覧は詳細な画面設計などは含まれないが、その機能でできる事・できない事が判断できる程度の説明を付記する
- 非機能要件には動作環境（対象ブラウザ）・性能・セキュリティ要件のほか、インフラや外部サービスに指定がある場合、それを記載する
- 業務フロー図は、詳細な画面操作などは含まずに対象システムに対してどの業務で何の入出力を行うかを記載する

  - システムのユーザおよび連携システムを想定しやすくなるので基本的に作った方が良いと思われる

- 納品物に運用マニュアルが含まれる場合、作成工数が発生するので何をどう納品するかは確定させる
- システムの対象外についてもドキュメントか見積もりの前提条件に記載する

見積もり
----------

要件に対して工数を見積もり、納品までの計画を立て、スケジュール・金額を提示する。

- 要件定義と基本設計の間に置いたのは、商習慣的に要件定義までは準委任、設計以降は請負で受ける事が多いため
- 詳細設計などでそもそも機能が要求と違うとなると困った事になるので、大きな齟齬がない様に努める。
- 前提条件は、概ね「要件にない追加機能は対象外になります」と書く。
- スケジュールは開発期間・検収期間・納期を記載

外部設計
--------

システムの外部から見て、そのシステムがどの様に振る舞うかを説明する

- 外部から見て、の主体はユーザと連携する外部システムがある
- ユースケース記述は業務フロー図との照らし合わせやテスト設計時に利用できる
- シークエンス図は外部システムとのやりとりがある場合に有効

.. attention::

  内容的に要件定義に含まれる場合もある。

基本設計
---------

システム全体に関わる仕様を決める

- 用語集は用語の説明とドキュメントでの出現箇所、英訳を記載する

  - 表記揺れの発見や・コーディングでの英訳を統一するのに有用

- アーキテクチャは、コーディング規約や命名規則など、開発者が準拠するルール

詳細設計
----------

機能ごとの技術仕様をまとめる

- どちらかというと実装者が計画的に実装するために作る
- コードレビューを行う場合、レビュワーは詳細設計のレビューも行うと良い

まとめ
=======

開発の成果物について、軽く解説をつけて列挙した。

それなりの量になったので関連ドキュメントは大体網羅している気がするので次は具体例を挙げてみたい。

(おまけ) 要件定義で気をつけると良い事
=========================================

- 期日になったというだけで要件定義を終わらせると、大抵の場合実質終わっていない

  - 第三者に成果物をレビューしてもらって客観的な評価してもらうのが良さそう

- 顧客にご協力頂かない限り良いシステムを作るのは不可能なので、定例のミーティングを設け、役割を決める等はやった方が良い
- タスクごとのデットラインと、過ぎた場合のリスクを前もって伝える

  - x: いついつまでに終わるように協力ください
  - o: いついつまでに終わらない場合、追加の予算が必要になります/スケジュールが変動します/アサインできない可能性があります

- 相手が忙しそうだとか単純に面倒だとかで突っつくのを躊躇っていると結果的により悪い事態になるので無心で突っついた方がいい
