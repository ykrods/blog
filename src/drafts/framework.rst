======================
フレームワーク
======================

.. warning::

  とりあえず思っていることの羅列なのでまとまっていない

利点
=====

* 複雑なことを簡単にできるようにしてくれる
* ルール（土台）を提供することで開発者に依存しないアプリケーションが作れる
* ドキュメントがある

注意点
=======

本来複雑なことをただ単純にするのは不可能で、単純化をするには何かしら前提をおいたり、制限を加えたり、独自の概念を導入したりする必要があるということを念頭におかないといけない

* フレームワークを使うということはルールを受け入れるということ
* フレームワークの上でその道を外れようとするのはやめたほうがよい
* フレームワークがやっている複雑なことが、自分にとって必要なことかを考えよう

フレームワークの選び方と付き合い方
====================================

* フレームワークが複雑なことをやってくれるのには初めは乗っかったほうがよく、
  中でやっている複雑なことを理解したら、徐々に離れていてもよい

  * 初心者は重めのフレームワークを学ぶのに抵抗があるという話を聞いたことがあるが、個人的な意見としては、そうして軽いフレームワークを使った結果パスワードをソルトも入れずストレッチングもせずただのハッシュで保存したりするので、職業エンジニアになるつもりならフレームワークがまず重めのを使って、そのフレームワークが何をやっていて、なぜそれをやっているのかを理解するというのがよいように思う（パスワードに関してはもうパスワード自体使わないという話もあるが）
  * 徐々に離れていくという前提では、中の処理を交換可能（プラガブル）なフレームワークが優秀なのではないかとおもう

* フレームワークにはいくつかの他のライブラリなどの組み合わせで構成されるものもあるが、基本的に外部依存が多いと外部の都合に合わせるのが時間がたつにつれて辛くなってくる

  * 依存ライブラリが交換可能になっているような、設計のよいフレームワークのほうが、長持ちする
  * ただのライブラリのラッパーの集合みたいなのは個人的に使う必要がないのではと思う

* フレームワークの「カスタマイズ」はなるべくしない

  * ドキュメントに記載されている範囲でカスタマイズする(デフォルトの実装を置き換える)のは問題ない
  * ドキュメントに書いていないオーバーライドとかモンキーパッチ的なことをすると、バージョンアップに追従するのが不可能になる場合があり、そうなってしまってはその時点で負債になる。加えてチーム開発のさいに、他の開発者が想定できない挙動を生み出す。

    * フレームワークの提供しているクラスを継承したアプリ用の共通クラス ( BaseController みたいな) はだいたいファッティになる

フレームワークの独自実装
=========================

* プログラミングに慣れてくると何でもできる気になってくるが、独自フレームワークを作るのは実務より抽象的なレイヤの設計・実装スキルが必要であり、そのレイヤをやったことがない人間がいきなり独自のものを作ってもうまくいかない方がむしろ自然である

  - 独自でなにかやるなら、最低限WEB上に公開できるようなドキュメントを作ってから(作れるようなレベルかを見直してから)がよい


最近のフレームワーク情勢
=================================

* ひと昔前はやってることが単純だったので自前で全部実装、みたいなことができたが、最近はフレームワークがデファクトになりつつある

  * OSSの中身をちゃんとよんで理解して使うのが良いとされてきたが、昨今すべてのコードを読むというのがもう現実的でない場合がでてきている(主にjs)

* フレームワークの目的も多様化しているので「流行ってる」ものをただ選べばいいという時代ではなくなってきてはないか？

  * Facebook が解決したかった問題と自分が解決したい問題は同じものか？開発の規模や体制などの問題の背景を共有していると言えるか？
  * 多様化というよりステージが違うというか、今まで何かの問題を解決し、実践のしていく中で新たな問題に当たってそれをまた解決し、というスパイラルを繰り返してきた人たちとそうでない人が同じ目線で問題を捉えられているのか？という

* どうあるべきか

  * 課題意識・目的をベースに選ぶ
  * 交換可能性というのも考慮したほうがよい？
