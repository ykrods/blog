===================================
分散システムでのID生成方法
===================================

課題
=======

IDというのは重複しないからIDとして機能するものだが、確実に重複しないようにするためにはIDを管理する中央システムが必要になる。分散システムでシステムを超えて重複しないIDをどうやって生成するかが問題になる。

ID生成方法の分類
=======================

（名称は一般的ではないかもしれない

* シーケンス

  * RDB の Auto increment な ID

* ランダム

  * uuid v4

* ランダム+タイムスタンプ

  * uuid v6 (draft)
  * ulid

* パーティション分割

  * Snowflake 及びその派生系
  * 概ね タイムスタンプ＋精製器の識別子＋シークエンス

* セグメント分割

  * didi/tinyid
  * Meituan-Dianping/Leaf
  * 主に中国圏で流行っている(？)様子。
  * 生成器ごとにIDの範囲を割り当てることで、ID が厳密に作成順にならない代わりに中央システムへのアクセスを減らす。

「ソート可能」について
=======================

IDで直接ソートするためにソート可能にしているのではなく、重複させないためにはRDBでいうユニークなインデックスが必要であり、ソート可能であった方がインデックスの作成効率が良い、ということらしい

「推測可能」について
=======================

* シーケンシャルだと例えば1日で何件増えたとか、あのユーザのIDは大体このあたりだ、などある程度データを類推できる可能性がある
* IDを適当に打ち込んだら外部にデータが流出してしまった、とかいうのは単純にセキュリティが甘すぎるという話でシーケンシャルなIDは悪というのはいささか短絡的ではないかと思う。文字数（桁数）で言えばシーケンスであればよほどのデータ量でなければ人間が記憶できる範囲だが、UUIDを覚えるのは不可能。

  * まぁつまるところ採用は要件次第
